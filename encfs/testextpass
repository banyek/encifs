#!/usr/bin/perl -w

# Sample password prompt program.  Demonstration of how to interface with
# encifs's --extpass option.  Note that encifs's extpass interface was chosen to
# work with existing password prompt programs, like ssh-askpass.
#
# The external password program is expected to somehow prompt for the password
# and return the password on stdout.  Encifs also provides some extra
# information which is stored in environment variables.
#
# Quick Start:  The only necessary part of this script for encifs operation is
# the final part which prints the password to stdout.
#
# Encifs records some environment variables with useful information:
# "encifs_root" holds a path to the raw encrypted data.
# "encifs_stdout" holds a file descriptor number which will display data to
# standard output (because standard output is used for the password).
# "encifs_stderr" holds a file descriptor number which for standard error..

use strict;
use IO::Handle;

# find out where we can send data to display to the user (assuming encifs was
# started in a terminal!)
my $realOut = $ENV{"encifs_stdout"} || fileno(STDOUT);
#my $realErr = $ENV{"encifs_stderr"} || fileno(STDERR);
#my $rootDir = $ENV{"encifs_root"} || "[unknown]";
#system("xmessage realOut=$realOut, err=$realErr");

# for grins, show all encifs related environment variables to encifs's standard
# output
my $io = new IO::Handle;
if($io->fdopen($realOut, "w"))
{
    while (my ($key,$value) = each %ENV) 
    {
	$io->print("$key=$value\n") if($key=~/encifs/);
    }
}
$io->close();

## XXX XXX - This is the only part necessary for encifs to be happy.
# the functional part -- print the encifs password to stdout
print "test\n";

